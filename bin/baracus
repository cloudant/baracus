#! /usr/bin/ruby

## Copyright 2009, Joe Williams <joe@joetify.com>
##
## Permission is hereby granted, free of charge, to any person
## obtaining a copy of this software and associated documentation
## files (the "Software"), to deal in the Software without
## restriction, including without limitation the rights to use,
## copy, modify, merge, publish, distribute, sublicense, and/or sell
## copies of the Software, and to permit persons to whom the
## Software is furnished to do so, subject to the following
## conditions:
##
## The above copyright notice and this permission notice shall be
## included in all copies or substantial portions of the Software.
##
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
## EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
## OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
## NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
## HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
## WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
## FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
## OTHER DEALINGS IN THE SOFTWARE.

$:.unshift(File.join(File.dirname(__FILE__), "..", "lib"))

require 'rubygems'
require 'rest_client'

require 'config'
require 'httperf'
require 'results'

class Baracus

  def self.get_url
    if Baracus::Config.user && Baracus::Config.password
      url = "http://#{Baracus::Config.user}:#{Baracus::Config.password}@#{Baracus::Config.host}:#{Baracus::Config.port}/#{Baracus::Config.db}"
    else
      url = "http://#{Baracus::Config.host}:#{Baracus::Config.port}/#{Baracus::Config.db}"
    end
    url
  end


  def self.main
    date = Time.now

    puts "Running #{Baracus::Config.bench_name}:"
    puts "Database: http://#{Baracus::Config.host}:#{Baracus::Config.port}/#{Baracus::Config.db}"
    puts "Rate: #{Baracus::Config.rate}"
    puts "Sessions: #{Baracus::Config.sessions}"
    puts "Writes: #{Baracus::Config.writes}"
    puts "Reads: #{Baracus::Config.reads}"
    puts "Document Size: #{Baracus::Config.doc_size}"
    puts "Batch=ok: #{Baracus::Config.batchok}\n"


    # create db
    RestClient.put("#{get_url}", "")


    # write test
    write_wsesslog = Baracus::Httperf.create_write_wsesslog(date)
    results = Baracus::Httperf.run_httperf(write_wsesslog)

    puts "### #{Baracus::Config.bench_name} write results ###"
    output = Baracus::Results.parse_results(results)
    puts ""
    puts Baracus::Results.format_results(output)
    puts "#####################\n"

    Baracus::Results.report_results(output, "writes", write_wsesslog, date)

    puts "waiting for 60 seconds ...\n"
    sleep 60

    # read test
    read_wsesslog = Baracus::Httperf.create_read_wsesslog(date)
    results = Baracus::Httperf.run_httperf(read_wsesslog)

    puts "### #{Baracus::Config.bench_name} read results ###"
    output = Baracus::Results.parse_results(results)
    puts ""
    puts Baracus::Results.format_results(output)
    puts "#####################"

    Baracus::Results.report_results(output, "reads", read_wsesslog, date)

    # clean up
    RestClient.delete("#{get_url}")
  end

  main
end
